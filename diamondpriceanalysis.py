# -*- coding: utf-8 -*-
"""DiamondPriceAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tV-ivw6y1VB7CG_Zxo6lLKaty3IlkiSv
"""

!pip install num2words

import pandas as pd
import numpy as np
import io
import matplotlib.pyplot as plt
from google.colab import files
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import joblib
from num2words import num2words


# Upload dataset using Google Colab
uploaded = files.upload()
filename = next(iter(uploaded))  # Dynamically get uploaded file name
df = pd.read_csv(io.BytesIO(uploaded[filename]))

# Display basic info
print("\nColumns:", df.columns.tolist())
print("\nSample rows:\n", df.head())

# Drop identifier or irrelevant columns if needed (optional)
if "Unnamed: 0" in df.columns:
    df = df.drop(columns=["Unnamed: 0"])

# Handle categorical features automatically
categorical_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()
numerical_cols = df.select_dtypes(include=['number']).columns.tolist()

# We'll predict both unit_price and total_price, so remove them when modeling the other
features = [col for col in df.columns if col not in ['unit_price', 'total_price']]

# Preprocessing pipeline
preprocessor = ColumnTransformer(
    transformers=[
        ("cat", OneHotEncoder(drop="first", sparse_output=False), categorical_cols),
    ],
    remainder="passthrough"
)

# Function to train and evaluate a model for a given target
def train_and_evaluate(target):
    print(f"\n\n--- Predicting {target} ---")
    X = df[features]
    y = df[target]

    X_processed = preprocessor.fit_transform(X)
    X_train, X_test, y_train, y_test = train_test_split(X_processed, y, test_size=0.2, random_state=42)

    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    preds = model.predict(X_test)

    rmse = np.sqrt(mean_squared_error(y_test, preds))
    r2 = r2_score(y_test, preds)
    accuracy = model.score(X_test, y_test) * 100

    print(f"RMSE: {rmse:.2f}")
    print(f"R^2: {r2:.4f}")
    print(f"Model Accuracy: {accuracy:.2f}%")

    # Visualization
    plt.figure(figsize=(8, 5))
    plt.scatter(y_test, preds, alpha=0.3)
    plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
    plt.xlabel("Actual")
    plt.ylabel("Predicted")
    plt.title(f"Actual vs Predicted: {target}")
    plt.grid(True)
    plt.show()

    # Save model and predictions
    model_name = f"retail_model_{target}.pkl"
    pred_name = f"retail_predictions_{target}.csv"
    joblib.dump(model, model_name)

    # Convert predictions to words
    pred_words = ["Rupees " + num2words(p, to='cardinal', lang='en_IN').replace('-', ' ').capitalize() + " Only" for p in preds]

    result_df = pd.DataFrame({
        "Actual": y_test.values,
        "Predicted": preds,
        "Predicted (in words)": pred_words
    })
    result_df.to_csv(pred_name, index=False)

    files.download(model_name)
    files.download(pred_name)

# Run for both targets
train_and_evaluate("unit_price")
train_and_evaluate("total_price")